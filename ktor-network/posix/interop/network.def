package=io.ktor.network.interop
compilerOpts.mingw_x64 = -DMINGW
---
#ifdef MINGW
#include <winsock.h>
#elif
#include <sys/select.h>
#include <arpa/inet.h>
#endif

#include <stdlib.h>

typedef struct selection_set {
    fd_set *value;
} selection_set;

selection_set select_create_fd_set() {
    fd_set *value = malloc(sizeof(fd_set));
    selection_set result;
    result.value = value;
    return result;
}

static inline void select_fd_add(int descriptor, selection_set set) {
    FD_SET(descriptor, set.value);
}

static inline void select_fd_clear(selection_set set) {
    FD_ZERO(set.value);
}

static inline int select_fd_isset(int descriptor, selection_set set) {
    return FD_ISSET(descriptor, set.value);
}

void selector_release_fd_set(selection_set set) {
    free(set.value);
}

#ifdef MINGW
int selector_pselect(int descriptor, selection_set read_set, selection_set write_set, selection_set error_set) {
    struct timeval timeout;
    timeout.tv_sec = 0;
    timeout.tv_usec = 100000;
    return select(descriptor, read_set.value, write_set.value, error_set.value, &timeout);
}

int send_win(int s, void *buf, int len, int flags) {
    return send(s, buf, len, flags);
}

int setsockopt_win(
        SOCKET s,
        int level,
        int optname,
        const void *optval,
        int optlen
) {
    return setsockopt(s, level, optname, optval, optlen);
}

int sendto_win(
        SOCKET s,
        const void *buf,
        int len,
        int flags,
        const struct sockaddr *to,
        int tolen
) {
    return sendto(s, buf, len, flags, to, tolen);
}
#elif
int selector_pselect(int descriptor, selection_set read_set, selection_set write_set, selection_set error_set) {
    return pselect(descriptor, read_set.value, write_set.value, error_set.value, NULL, NULL);
}
#endif
